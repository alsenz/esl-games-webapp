load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin", "nodejs_test", "nodejs_binary", "npm_package_bin")
load("@npm//react-scripts:index.bzl", "react_scripts", "react_scripts_test")

# Filename conventions described at
# https://create-react-app.dev/docs/running-tests#filename-conventions
_TESTS = [
    "src/**/*.test.js*",
    "src/**/*.test.ts*",
    "src/**/*.spec.js*",
    "src/**/*.spec.ts*",
    "src/**/__tests__/**/*.js*",
    "src/**/__tests__/**/*.ts*",
    "_tmp/**"
]


nodejs_binary(
    name = "builder",
    entry_point = "scripts/build.js",
)

#TODO this needs to be parameterised by the 3 different apps...

# Remember to keep these up to date 
APP_BUNDLE = [
    "build/asset-manifest.json",
    "build/favicon.ico",
    "build/index.html",
    "build/logo192.png",
    "build/logo512.png",
    "build/manifest.json",
    "build/robots.txt",
    "build/static/js/main.js",
    "build/static/js/main.js.LICENSE.txt",
    "build/static/js/main.js.map",
    "build/static/media/logo.6ce24c58.svg"
]

#TODO multiples with multiple app roots for different apps
genrule(
    name = "package",
    srcs = glob(
        [
            "public/*",
            "src/**/*",
            "node_modules/**/*"
        ],
        exclude = _TESTS,
    ) + [
        "package.json"
    ],
    outs = APP_BUNDLE,
    tools = ["//:builder"],
    output_to_bindir = True,
    cmd = "BUILD_DEST=$$(realpath $(@D)); BUILDER_CMD=$$(realpath $(execpath //:builder)); cd $$(dirname $(execpath package.json)); $$BUILDER_CMD; cp -r build $BUILD_DEST"
)

filegroup(
    name = "assets", #TODO parameterise
    srcs = APP_BUNDLE,
)

# Now let's make a docker image out of it

load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")

pkg_tar(
    name = "webapp-tar",
    srcs = APP_BUNDLE,
    mode = "0o644",
    package_dir = "/usr/share/nginx/html/",
    strip_prefix = "build",
)

container_image(
    name = "webapp-image",
    base = "@nginx_base//image",
    #directory = "/usr/share/nginx/html", #TODO build and then check where these are coming out and hone
    tars = [":webapp-tar"]
    #symlinks = {"/usr/share/nginx/html/bundle.js": "/usr/share/nginx/html/store.bundle.js"},
)
